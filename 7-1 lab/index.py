import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D, Dense, Flatten, Dropout, MaxPooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
cifar_dataset = keras.datasets.cifar10
(train_images, train_labels), (test_images, test_labels) = cifar_dataset.load_data()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
mean = np.mean(train_images)
stddev = np.std(train_images)
train_images = (train_images - mean) / stddev
test_images = (test_images - mean) / stddev

# One-hot encoding –º–µ—Ç–æ–∫
train_labels = to_categorical(train_labels, num_classes=10)
test_labels = to_categorical(test_labels, num_classes=10)

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –º–æ–¥–µ–ª–µ–π ---
configs = {
    "Conf1": [
        Conv2D(64, (5, 5), strides=(2, 2), activation="relu", padding="same"),
        Conv2D(64, (3, 3), strides=(2, 2), activation="relu", padding="same"),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
    "Conf2": [
        Conv2D(64, (3, 3), strides=(2, 2), activation="relu", padding="same"),
        Conv2D(16, (2, 2), strides=(2, 2), activation="relu", padding="same"),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
    "Conf3": [
        Conv2D(64, (3, 3), strides=(2, 2), activation="relu", padding="same"),
        Conv2D(16, (2, 2), strides=(2, 2), activation="relu", padding="same"),
        Dropout(0.2),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
    "Conf4": [
        Conv2D(64, (4, 4), strides=(1, 1), activation="relu", padding="same"),
        Conv2D(64, (2, 2), strides=(2, 2), activation="relu", padding="same"),
        Conv2D(32, (3, 3), strides=(1, 1), activation="relu", padding="same"),
        MaxPooling2D(pool_size=(2, 2)),
        Dense(64, activation="relu"),
        Dropout(0.2),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
    "Conf5": [
        Conv2D(64, (4, 4), strides=(1, 1), activation="relu", padding="same"),
        Conv2D(64, (2, 2), strides=(2, 2), activation="relu", padding="same"),
        Conv2D(32, (3, 3), strides=(1, 1), activation="relu", padding="same"),
        Conv2D(32, (3, 3), strides=(1, 1), activation="relu", padding="same"),
        MaxPooling2D(pool_size=(2, 2)),
        Dense(64, activation="relu"),
        Dense(64, activation="relu"),
        Dropout(0.2),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
    "Conf6": [
        Conv2D(64, (4, 4), strides=(1, 1), activation="tanh", padding="same"),
        Conv2D(64, (2, 2), strides=(2, 2), activation="tanh", padding="same"),
        Conv2D(32, (3, 3), strides=(1, 1), activation="tanh", padding="same"),
        Conv2D(32, (3, 3), strides=(1, 1), activation="tanh", padding="same"),
        MaxPooling2D(pool_size=(2, 2)),
        Dense(64, activation="tanh"),
        Dense(64, activation="tanh"),
        Dropout(0.2),
        Flatten(),
        Dense(10, activation="softmax"),
    ],
}

EPOCHS = 5
BATCH_SIZE = 16
histories = {}

# --- –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
for name, layers in configs.items():
    model = Sequential([keras.layers.Input(shape=(32, 32, 3))] + layers)
    model.compile(
        loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"]
    )

    print(f"üîπ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {name} ...")
    history = model.fit(
        train_images,
        train_labels,
        validation_data=(test_images, test_labels),
        epochs=EPOCHS,
        batch_size=BATCH_SIZE,
        verbose=1,
    )

    histories[name] = history

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
plt.figure(figsize=(12, 6))
for name, history in histories.items():
    plt.plot(history.history["val_loss"], label=f"{name} (Test Loss)")
plt.xlabel("–≠–ø–æ—Ö–∏")
plt.ylabel("–û—à–∏–±–∫–∞")
plt.legend()
plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
plt.show()

plt.figure(figsize=(12, 6))
for name, history in histories.items():
    plt.plot(history.history["loss"], label=f"{name} (Train Loss)")
plt.xlabel("–≠–ø–æ—Ö–∏")
plt.ylabel("–û—à–∏–±–∫–∞")
plt.legend()
plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
plt.show()
